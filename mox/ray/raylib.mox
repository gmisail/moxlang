#
#   Bindings for raylib
#

import "raylib.h"

extern function InitWindow(w : int, h : int, title : Pointer<char>) -> void
extern function CloseWindow() -> void
extern function WindowShouldClose() -> int

extern RAYWHITE -> Color

extern function BeginDrawing() -> void
extern function EndDrawing() -> void
extern function ClearBackground() -> void

###
void InitWindow(int width, int height, const char *title);              // Initialize window and OpenGL context
    bool WindowShouldClose(void);                                           // Check if KEY_ESCAPE pressed or Close icon pressed
    void CloseWindow(void);                                                 // Close window and unload OpenGL context
    bool IsWindowReady(void);                                               // Check if window has been initialized successfully
    bool IsWindowMinimized(void);                                           // Check if window has been minimized (or lost focus)
    bool IsWindowResized(void);                                             // Check if window has been resized
    bool IsWindowHidden(void);                                              // Check if window is currently hidden
    bool IsWindowFullscreen(void);                                          // Check if window is currently fullscreen
    void ToggleFullscreen(void);                                            // Toggle fullscreen mode (only PLATFORM_DESKTOP)
    void UnhideWindow(void);                                                // Show the window
    void HideWindow(void);                                                  // Hide the window
    void SetWindowIcon(Image image);                                        // Set icon for window (only PLATFORM_DESKTOP)
    void SetWindowTitle(const char *title);                                 // Set title for window (only PLATFORM_DESKTOP)
    void SetWindowPosition(int x, int y);                                   // Set window position on screen (only PLATFORM_DESKTOP)
    void SetWindowMonitor(int monitor);                                     // Set monitor for the current window (fullscreen mode)
    void SetWindowMinSize(int width, int height);                           // Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
    void SetWindowSize(int width, int height);                              // Set window dimensions
    void *GetWindowHandle(void);                                            // Get native window handle
    int GetScreenWidth(void);                                               // Get current screen width
    int GetScreenHeight(void);                                              // Get current screen height
    int GetMonitorCount(void);                                              // Get number of connected monitors
    int GetMonitorWidth(int monitor);                                       // Get primary monitor width
    int GetMonitorHeight(int monitor);                                      // Get primary monitor height
    int GetMonitorPhysicalWidth(int monitor);                               // Get primary monitor physical width in millimetres
    int GetMonitorPhysicalHeight(int monitor);                              // Get primary monitor physical height in millimetres
    Vector2 GetWindowPosition(void);                                        // Get window position XY on monitor
    const char *GetMonitorName(int monitor);                                // Get the human-readable, UTF-8 encoded name of the primary monitor
    const char *GetClipboardText(void);                                     // Get clipboard text content
    void SetClipboardText(const char *text);
###

