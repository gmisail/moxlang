###

    vector implementation

###

import "mox/std.mox"
import "mox/array.mox"

class Vector<T>

    var data : Pointer<T>
    var len : int
    var size : int

    function init()
        self.len = 0
        self.size = 0
    end

    #
    #   Returns the number of elements in the vector
    #
    function length() -> int
        return self.len
    end

    #
    #   Set value at index
    #
    function set(index : int, value : T)
        if(index >= self.len)
            return
        end

        self.data[index] = value
    end

    #
    #   Get value at index
    #
    function get(index : int) -> T
        if(index >= self.len)
            return 0
        end

        return self.data[index]
    end

    #
    #   Add an element to the back of the vector
    #
    function add(element : T)
        if(self.size == 0)
            self.size = 8
            self.data = malloc(@size(T) * self.size)
        end

        if (self.size == self.len)
            self.size = self.size * 2
            self.data = realloc(self.data, @size(T) * self.size)
        end

        self.data[self.len] = element
        self.len = self.len + 1
    end

    #
    #   Delete an element at an index
    #
    function remove(index : int)
        if(index >= self.size)
            return
        end

        self.data[index] = NULL

        var temp : Pointer<T> = malloc(@size(T) * self.len * 2)
        var j : int = 0
        for(i from 0 to self.len)
            if(self.data[i] != NULL)
                temp[j] = self.data[i]
                j = j + 1
            end
        end

        free(self.data)

        self.data = temp
        self.len = self.len - 1
    end

    function concat(vec : Vector<T>)
        var vec_len : int = vec.length<T>()
        for(i from 0 to vec_len)
            self.add<T>(vec.get<T>(i))
        end
    end

    function destroy()
        free(self.data)
    end

end